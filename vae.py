"""vae.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hBrAapL3hO_CBBNwoE8dgzedAK_nYvsN
"""

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import keras
from tensorflow import keras
from sklearn.model_selection import train_test_split, KFold, TimeSeriesSplit
import tensorflow as tf
import copy
from scipy.spatial.transform import Rotation as R
from typing import List, Tuple
from numpy import genfromtxt
from keras import mixed_precision
from typing import List, Tuple
#mixed_precision.set_global_policy('mixed_float16')
from nptyping import NDArray, Float
#plt.style.use('classic')
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from sklearn.cluster import KMeans

NUM_P_SAMPLES = 100000 #949207 #900000
NUM_N_SAMPLES = 0

data = genfromtxt("data/data_Apr_01_20221.csv", delimiter=',',
                        invalid_raise = False)

def min_max_normalization(x, new_min, new_max):
  current_min = np.min(x, axis = 0)
  current_max = np.max(x, axis = 0)
  normalized =  (x - np.min(x, axis = 0))/ (current_max - \
                          current_min) * (new_max - new_min) + new_min
  normalized[np.isnan(normalized)] = 0
  return normalized

def generate_positive_sample_motion_sequences(
            input_data,
            output_data,
            signal_data,
            sequence_window = 5):

    signal_data = np.clip(signal_data, 0, 143)
    n_samples = signal_data.shape[0]
    output_data = output_data - \
              np.array([0.00468998309224844, 
                        -0.0009492466342635453, 
                        0.12456292659044266])
    
    input_data = min_max_normalization(input_data, -0.5, 0.5)
    n_inputs = input_data.shape[1]
    n_outputs = output_data.shape[1]
    n_signal_channels = signal_data.shape[1]

    input_sequence = np.empty((n_samples - sequence_window,0))
    output_sequence = np.empty((n_samples - sequence_window, 0))
    signal_sequence = np.empty((n_samples - sequence_window, 0))

    for i in range(sequence_window):
        input_sequence = np.concatenate(
                                (input_sequence, input_data[i:-sequence_window + i, :]),
                                axis = 1)
        signal_sequence = np.concatenate(
                                (signal_sequence, signal_data[i:-sequence_window +i, :]),
                                axis = 1)
        output_sequence = np.concatenate(
                                (output_sequence, output_data[i:-sequence_window + i, :]),
                                axis = 1)
  
    prediction_labels = output_data[sequence_window:, :]
    embedding_prediction_labels = np.ones((prediction_labels.shape[0], 1))
    #input_sequence = (input_sequence - input_sequence.min()) / \
    #                        (input_sequence.max() - input_sequence.min()) * (600)
    return (input_sequence[:NUM_P_SAMPLES, :],
            signal_sequence[:NUM_P_SAMPLES, :],
            output_sequence[:NUM_P_SAMPLES, :],
            prediction_labels[:NUM_P_SAMPLES, :],
            embedding_prediction_labels[:NUM_P_SAMPLES, :])
    
def generate_positive_data_and_labels(
        data,
        sequence_window = 5):
    (p_input_sequence, p_signal_sequence, p_output_sequence,
     prediction_labels, p_embedding_prediction_labels) = \
                                      generate_positive_sample_motion_sequences(
        input_data=data[:, 14:],
        output_data=data[:, 11:14],
        signal_data=data[:, :11],
        sequence_window=sequence_window)
    
    X = p_signal_sequence #np.concatenate((p_signal_sequence, n_signal_sequence), axis = 0)
    X = min_max_normalization(X, -1, 1)
    y = prediction_labels #np.concatenate((p_embedding_prediction_labels, 
                                      #n_embedding_prediction_labels), axis=0)
    r = R.from_rotvec([0, 0, np.pi/4.])
    y = r.apply(y)
    y = min_max_normalization(y, -1, 1)
    return (X, y)

class Sampling(keras.layers.Layer):
    """Uses (z_mean, z_log_var) to sample z, the vector encoding a digit."""

    def call(self, inputs):
        z_mean, z_log_var = inputs
        batch = tf.shape(z_mean)[0]
        dim = tf.shape(z_mean)[1]
        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))
        return z_mean + tf.exp(0.5 * z_log_var) * epsilon


class VAE(keras.Model):
    def __init__(self, encoder, decoder, **kwargs):
        super(VAE, self).__init__(**kwargs)
        self.encoder = encoder
        self.decoder = decoder
        self.total_loss_tracker = keras.metrics.Mean(name="total_loss")
        self.reconstruction_loss_tracker = keras.metrics.Mean(
            name="reconstruction_loss"
        )
        self.kl_loss_tracker = keras.metrics.Mean(name="kl_loss")

    @property
    def metrics(self):
        return [
            self.total_loss_tracker,
            self.reconstruction_loss_tracker,
            self.kl_loss_tracker,
        ]

    def train_step(self, data):
        with tf.GradientTape() as tape:
            z_mean, z_log_var, z = self.encoder(data)
            reconstruction = self.decoder(z)
            reconstruction_loss = tf.reduce_mean(
                tf.reduce_sum(
                    keras.losses.binary_crossentropy(data, reconstruction)
                )
            )
            kl_loss = -0.5 * (1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var))
            kl_loss = tf.reduce_mean(tf.reduce_sum(kl_loss, axis=1))
            total_loss = reconstruction_loss + kl_loss
        grads = tape.gradient(total_loss, self.trainable_weights)
        self.optimizer.apply_gradients(zip(grads, self.trainable_weights))
        self.total_loss_tracker.update_state(total_loss)
        self.reconstruction_loss_tracker.update_state(reconstruction_loss)
        self.kl_loss_tracker.update_state(kl_loss)
        return {
            "loss": self.total_loss_tracker.result(),
            "reconstruction_loss": self.reconstruction_loss_tracker.result(),
            "kl_loss": self.kl_loss_tracker.result(),
        }


def get_simple_encoder_conv(latent_dim=3, seq_window=3):
    encoder_inputs = keras.Input(shape=(seq_window, 11))
    x = keras.layers.Conv1D(32, 3, activation="relu", strides=2,
                            padding="same")(encoder_inputs)
    x = keras.layers.Conv1D(64, 3, activation="relu", strides=2,
                            padding="same")(x)
    x = keras.layers.Flatten()(x)
    x = keras.layers.Dense(16, activation="relu")(x)
    z_mean = keras.layers.Dense(latent_dim, name="z_mean")(x)
    z_log_var = keras.layers.Dense(latent_dim, name="z_log_var")(x)
    z = Sampling()([z_mean, z_log_var])
    encoder = keras.Model(encoder_inputs, [z_mean, z_log_var, z],
                          name="encoder")
    encoder.summary()
    return encoder


def get_simple_decoder_conv(latent_dim=3, seq_window=3):
    latent_inputs = keras.Input(shape=(latent_dim,))
    x = keras.layers.Dense(42 * 64, activation="relu")(latent_inputs)
    x = keras.layers.Reshape((42, 64))(x)
    x = keras.layers.Conv1DTranspose(64, 3, activation="relu", strides=2,
                                     padding="same")(x)
    x = keras.layers.Conv1DTranspose(32, 3, activation="relu", strides=2,
                                     padding="same")(x)
    decoder_outputs = keras.layers.Conv1DTranspose(1, 3, activation="sigmoid",
                                                   padding="same")(x)
    decoder_outputs = keras.layers.Flatten()(decoder_outputs)
    decoder_outputs = keras.layers.Dense(seq_window * 11, activation='sigmoid')(decoder_outputs)
    decoder_outputs = keras.layers.Reshape((seq_window, 11))(decoder_outputs)
    decoder = keras.Model(latent_inputs, decoder_outputs, name="decoder")
    decoder.summary()
    return decoder

def generate_motion_sequence_embedding_vae(
        data,
        labels,
        embedding_output_dim=3,
        sequence_window=20,
        record=True
):
    data = data.astype(np.float16)
    encoder = get_simple_encoder_conv(latent_dim=embedding_output_dim,
                                      seq_window=sequence_window)
    decoder = get_simple_decoder_conv(latent_dim=embedding_output_dim,
                                      seq_window=sequence_window)
    model = VAE(encoder, decoder)

    model.compile(optimizer="adam")

    weights = None
    if record:
        weights = []
        save = keras.callbacks.LambdaCallback(on_epoch_end=lambda batch,
                                                                  logs: weights.append(model
                                                                                       .layers[0].get_weights()[0]))
        kfold = TimeSeriesSplit(n_splits=2)
        k_fold_results = []
        for train, test in kfold.split(data, labels):
            x_train = data[train]
            y_train = labels[train]
            training = x_train.reshape(-1, sequence_window, 11)
            model.fit(training, epochs=10, batch_size=1000)
            # model.fit(x_train, [x_train, y_train], epochs = 10, verbose = 1, batch_size = 1000,
            #            callbacks= [save], validation_data = (X[test], [X[test], y[test]]))
    else:
        kfold = TimeSeriesSplit(n_splits=2)
        k_fold_results = []
        for train, test in kfold.split(data, labels):
            x_train = data[train]
            y_train = labels[train]
            training = x_train.reshape(-1, sequence_window, 11)
            model.fit(training, epochs=10, batch_size=1000)
            # model.fit([X_train, X_train], labels, epochs = 10, verbose = 1, batch_size = 1000)
    return (model, encoder, decoder, weights)

if __name__ == '__main__':
    import pandas as pd
    SUB_SAMPLES = 40000
    TRAINING = True
    NUM_CHANNELS = 11
    sequence_window = 10

    (X, y) = generate_positive_data_and_labels(data, sequence_window)
    if TRAINING:
        (model, encoder, decoder, weight_logs) = \
                              generate_motion_sequence_embedding_vae(X, y, 3,
                                           sequence_window, record = False)
        encoder.save('encoder_vae.hdf5', 'hdf5')
        decoder.save('decoder_vae.hdf5', 'hdf5')

    encoder = keras.models.load_model('encoder_vae.hdf5', compile=False,
                                      custom_objects = {'Sampling' : Sampling})
    embedding_output = encoder.predict(X[:SUB_SAMPLES, :].reshape(-1,sequence_window,
                                                                  NUM_CHANNELS))
    kmeans = KMeans(n_clusters=3, random_state=0).fit(y)
    df = pd.DataFrame(data=y[:SUB_SAMPLES, :],
                      columns=['x', 'y', 'z'])
    df['partitions'] = kmeans.labels_[:SUB_SAMPLES].astype(str).reshape(-1, 1)
    fig = px.scatter_3d(df, x='x', y='y', z='z', color='partitions')
    #fig.update_layout(
    #    scene=dict(
    #        xaxis=dict(nticks=4, range=[-0.1, 0.1], ),
    #        yaxis=dict(nticks=4, range=[-0.03, 0.03], ),
    #        zaxis=dict(nticks=4, range=[-0.06, 0.03], ), ),
    #    width=700,
    #    margin=dict(r=20, l=10, b=10, t=10))
    fig.show()
    df_embedding = pd.DataFrame(data = embedding_output[2],
                      columns = ['dim_0', 'dim_1', 'dim_2'])

    df_embedding['partitions'] = kmeans.labels_[:SUB_SAMPLES].astype(str).reshape(-1, 1)
    fig = px.scatter_3d(df_embedding, x = 'dim_0', y = 'dim_1',
                        z = 'dim_2', color = 'partitions')
    fig.show()